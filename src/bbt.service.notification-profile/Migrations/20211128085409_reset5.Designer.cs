// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Notification.Profile.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20211128085409_reset5")]
    partial class reset5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("Consumer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("$id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Client")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeviceKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filter")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMailEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPushEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSmsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceId")
                        .HasColumnType("TEXT");

                    b.Property<long>("User")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("$id")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("SourceId");

                    b.ToTable("Consumers");

                    b.HasAnnotation("SqlServer:MemoryOptimized", true);
                });

            modelBuilder.Entity("ConsumerVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ConsumerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId");

                    b.ToTable("ConsumerVariant");
                });

            modelBuilder.Entity("Source", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailServiceReference")
                        .HasColumnType("TEXT");

                    b.Property<string>("PushServiceReference")
                        .HasColumnType("TEXT");

                    b.Property<string>("Secret")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmsServiceReference")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Topic")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sources");

                    b.HasData(
                        new
                        {
                            Id = "[SAMPLE]Incoming-EFT",
                            ApiKey = "a1b2c33d4e5f6g7h8i9jakblc",
                            EmailServiceReference = "notify_email_incoming_eft",
                            PushServiceReference = "notify_push_incoming_eft",
                            Secret = "11561681-8ba5-4b46-bed0-905ae1769bc6",
                            SmsServiceReference = "notify_sms_incoming_eft",
                            Title = "Gelen EFT",
                            Topic = "http://localhost:8082/topics/cdc_eft/incoming_eft"
                        },
                        new
                        {
                            Id = "[SAMPLE]Incoming-FAST",
                            ApiKey = "a1b2c33d4e5f6g7h8i9jakblc",
                            EmailServiceReference = "notify_email_incoming_fast",
                            PushServiceReference = "notify_push_incoming_fast",
                            Secret = "11561681-8ba5-4b46-bed0-905ae1769bc6",
                            SmsServiceReference = "notify_sms_incoming_fast",
                            Title = "Gelen Fast",
                            Topic = "http://localhost:8082/topics/cdc_eft/incoming_fast"
                        },
                        new
                        {
                            Id = "[SAMPLE]Incoming-QR",
                            ApiKey = "a1b2c33d4e5f6g7h8i9jakblc",
                            EmailServiceReference = "notify_email_incoming_qr",
                            PushServiceReference = "notify_push_incoming_qr",
                            Secret = "11561681-8ba5-4b46-bed0-905ae1769bc6",
                            SmsServiceReference = "notify_sms_incoming_qr",
                            Title = "Gelen EFT",
                            Topic = "http://localhost:8082/topics/cdc_eft/incoming_qr"
                        });
                });

            modelBuilder.Entity("Consumer", b =>
                {
                    b.HasOne("Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.OwnsOne("Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("ConsumerId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("CountryCode")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Number")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Prefix")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ConsumerId");

                            b1.ToTable("Consumers");

                            b1.WithOwner()
                                .HasForeignKey("ConsumerId");
                        });

                    b.Navigation("Phone");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("ConsumerVariant", b =>
                {
                    b.HasOne("Consumer", "Consumer")
                        .WithMany("Variants")
                        .HasForeignKey("ConsumerId");

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("Consumer", b =>
                {
                    b.Navigation("Variants");
                });
#pragma warning restore 612, 618
        }
    }
}
